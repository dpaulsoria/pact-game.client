{"version":3,"sources":["../node_modules/howler/dist/howler.js"],"names":["global","__WEBPACK_AMD_DEFINE_RESULT__","HowlerGlobal","this","init","prototype","self","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","i","length","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","stop","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","userAgent","match","isOldOpera","parseInt","split","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","m4b","mp4","weba","webm","dolby","flac","_unlockAudio","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","catch","console","warn","audio","push","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","handleSuspension","_resumeAfterSuspend","Howl","o","src","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhr","method","xhr","headers","withCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","event","action","url","str","exec","toLowerCase","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","timeout","abs","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_clearSound","_interval","args","indexOf","apply","fade","from","to","len","min","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","setInterval","tick","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","playing","realTime","rateSeek","seekAndEmit","emitSeek","sounds","_errorFn","_loadFn","_endFn","index","splice","remCache","cache","on","events","off","isId","keys","Object","Array","isArray","msg","call","task","shift","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","test","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","_endListener","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","XMLHttpRequest","open","responseType","forEach","key","setRequestHeader","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","exports","module","_super","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner"],"mappings":"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","file":"static/js/2.bcc17550.chunk.js","sourcesContent":["/*!\n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function () {\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function HowlerGlobal() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function init() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = typeof window !== 'undefined' && window.navigator ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n      return self;\n    },\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function volume(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n        return self;\n      }\n      return self._volume;\n    },\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function mute(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i = 0; i < self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j = 0; j < ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n            if (sound && sound._node) {\n              sound._node.muted = muted ? true : sound._muted;\n            }\n          }\n        }\n      }\n      return self;\n    },\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function stop() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i = 0; i < self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n      return self;\n    },\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function unload() {\n      var self = this || Howler;\n      for (var i = self._howls.length - 1; i >= 0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n      return self;\n    },\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function codecs(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function _setup() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch (e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n      return self;\n    },\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function _setupCodecs() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = typeof Audio !== 'undefined' ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33;\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n      return self;\n    },\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function _unlockAudio() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function unlock(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function () {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      return self;\n    },\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function _obtainHtml5Audio() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function () {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n      return new Audio();\n    },\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function _releaseHtml5Audio(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n      return self;\n    },\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function _autoSuspend() {\n      var self = this;\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i = 0; i < self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j = 0; j < self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function () {\n        if (!self.autoSuspend) {\n          return;\n        }\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function handleSuspension() {\n          self.state = 'suspended';\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n      return self;\n    },\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function _autoResume() {\n      var self = this;\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function () {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function Howl(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function init(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = typeof o.format !== 'string' ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = typeof o.preload === 'boolean' || o.preload === 'metadata' ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = typeof o.src !== 'string' ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{\n        fn: o.onend\n      }] : [];\n      self._onfade = o.onfade ? [{\n        fn: o.onfade\n      }] : [];\n      self._onload = o.onload ? [{\n        fn: o.onload\n      }] : [];\n      self._onloaderror = o.onloaderror ? [{\n        fn: o.onloaderror\n      }] : [];\n      self._onplayerror = o.onplayerror ? [{\n        fn: o.onplayerror\n      }] : [];\n      self._onpause = o.onpause ? [{\n        fn: o.onpause\n      }] : [];\n      self._onplay = o.onplay ? [{\n        fn: o.onplay\n      }] : [];\n      self._onstop = o.onstop ? [{\n        fn: o.onstop\n      }] : [];\n      self._onmute = o.onmute ? [{\n        fn: o.onmute\n      }] : [];\n      self._onvolume = o.onvolume ? [{\n        fn: o.onvolume\n      }] : [];\n      self._onrate = o.onrate ? [{\n        fn: o.onrate\n      }] : [];\n      self._onseek = o.onseek ? [{\n        fn: o.onseek\n      }] : [];\n      self._onunlock = o.onunlock ? [{\n        fn: o.onunlock\n      }] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function action() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n      return self;\n    },\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function load() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i = 0; i < self._src.length; i++) {\n        var ext, str;\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n      return self;\n    },\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function play(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i = 0; i < self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function action() {\n            self.play(soundId);\n          }\n        });\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000 - seek);\n      var timeout = duration * 1000 / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function setParams() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function playWebAudio() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = sound._muted || self._muted ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n          if (!internal) {\n            setTimeout(function () {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function playHtml5() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play.then(function () {\n                self._playLock = false;\n                node._unlocked = true;\n                if (!internal) {\n                  self._emit('play', sound._id);\n                  self._loadQueue();\n                }\n              }).catch(function () {\n                self._playLock = false;\n                self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                // Reset the ended and paused values.\n                sound._ended = true;\n                sound._paused = true;\n              });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function () {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS;\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          var listener = function listener() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n      return sound._id;\n    },\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function pause(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function action() {\n            self.pause(id);\n          }\n        });\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n      return self;\n    },\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function stop(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function action() {\n            self.stop(id);\n          }\n        });\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n      return self;\n    },\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function mute(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function action() {\n            self.mute(muted, id);\n          }\n        });\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n          self._emit('mute', sound._id);\n        }\n      }\n      return self;\n    },\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function volume() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function action() {\n              self.volume.apply(self, args);\n            }\n          });\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n      return self;\n    },\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function fade(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function action() {\n            self.fade(from, to, len, id);\n          }\n        });\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + len / 1000;\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n      return self;\n    },\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function _startFadeInterval(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, steps > 0 ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function () {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if (to < from && vol <= to || to > from && vol >= to) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function _stopFade(id) {\n      var self = this;\n      var sound = self._soundById(id);\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n      return self;\n    },\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function loop() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i = 0; i < ids.length; i++) {\n        sound = self._soundById(ids[i]);\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n      return self;\n    },\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function rate() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function action() {\n              self.rate.apply(self, args);\n            }\n          });\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = (self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000 - seek;\n            var timeout = duration * 1000 / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n      return self;\n    },\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function seek() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function action() {\n            self.seek.apply(self, args);\n          }\n        });\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function seekAndEmit() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function emitSeek() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n      return self;\n    },\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function playing(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n      return false;\n    },\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function duration(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n      return duration;\n    },\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function state() {\n      return this._state;\n    },\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function unload() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i = 0; i < sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i = 0; i < Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n      return null;\n    },\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function on(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n      if (typeof fn === 'function') {\n        events.push(once ? {\n          id: id,\n          fn: fn,\n          once: once\n        } : {\n          id: id,\n          fn: fn\n        });\n      }\n      return self;\n    },\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function off(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i = 0; i < events.length; i++) {\n          var isId = id === events[i].id;\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i = 0; i < keys.length; i++) {\n          if (keys[i].indexOf('_on') === 0 && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n      return self;\n    },\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function once(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n      return self;\n    },\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function _emit(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i = events.length - 1; i >= 0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function (fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n      return self;\n    },\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function _loadQueue(event) {\n      var self = this;\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n      return self;\n    },\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function _ended(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n        var timeout = (sound._stop - sound._start) * 1000 / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n      return self;\n    },\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function _clearTimer(id) {\n      var self = this;\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n        delete self._endTimers[id];\n      }\n      return self;\n    },\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function _soundById(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n      return null;\n    },\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function _inactiveSound() {\n      var self = this;\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function _drain() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i = self._sounds.length - 1; i >= 0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function _getSoundIds(id) {\n      var self = this;\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i = 0; i < self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function _refreshBuffer(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n      return self;\n    },\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function _cleanBuffer(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try {\n            node.bufferSource.buffer = Howler._scratchBuffer;\n          } catch (e) {}\n        }\n      }\n      node.bufferSource = null;\n      return self;\n    },\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function _clearSound(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function Sound(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function init() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n      return self;\n    },\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function create() {\n      var self = this;\n      var parent = self._parent;\n      var volume = Howler._muted || self._muted || self._parent._muted ? 0 : self._volume;\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n      return self;\n    },\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function reset() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n      return self;\n    },\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function _errorListener() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function _loadListener() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {\n          __default: [0, parent._duration * 1000]\n        };\n      }\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function _endListener() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function loadBuffer(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n      return;\n    }\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i = 0; i < data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function (key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n      xhr.onload = function () {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function () {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function safeXhrSend(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function decodeAudioData(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function error() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function success(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  };\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function loadSound(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {\n        __default: [0, self._duration * 1000]\n      };\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function setupAudioContext() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch (e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = /iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform);\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {\n    // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function () {\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function (pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i = self._howls.length - 1; i >= 0; i--) {\n      self._howls[i].stereo(pan);\n    }\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function (x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = typeof y !== 'number' ? self._pos[1] : y;\n    z = typeof z !== 'number' ? self._pos[2] : z;\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function (x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = typeof y !== 'number' ? or[1] : y;\n    z = typeof z !== 'number' ? or[2] : z;\n    xUp = typeof xUp !== 'number' ? or[3] : xUp;\n    yUp = typeof yUp !== 'number' ? or[4] : yUp;\n    zUp = typeof zUp !== 'number' ? or[5] : zUp;\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = function (_super) {\n    return function (o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{\n        fn: o.onstereo\n      }] : [];\n      self._onpos = o.onpos ? [{\n        fn: o.onpos\n      }] : [];\n      self._onorientation = o.onorientation ? [{\n        fn: o.onorientation\n      }] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  }(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function (pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function action() {\n          self.stereo(pan, id);\n        }\n      });\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = typeof Howler.ctx.createStereoPanner === 'undefined' ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function (x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function action() {\n          self.pos(x, y, z, id);\n        }\n      });\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = typeof y !== 'number' ? 0 : y;\n    z = typeof z !== 'number' ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function (x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function action() {\n          self.orientation(x, y, z, id);\n        }\n      });\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = typeof y !== 'number' ? self._orientation[1] : y;\n    z = typeof z !== 'number' ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n              setupPanner(sound, 'spatial');\n            }\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function () {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i = 0; i < ids.length; i++) {\n      sound = self._soundById(ids[i]);\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  }(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  }(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function setupPanner(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();"],"sourceRoot":""}